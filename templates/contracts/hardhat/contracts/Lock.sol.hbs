// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

/**
 * @title MicroSavingsPayroll
 * @dev Basit bir örnek: maaş ödemesi ve CELO staking mantığı
 */
contract MicroSavingsPayroll {

    address public owner;                      // Platform sahibi
    mapping(address => uint256) public balances;  // Kullanıcı bakiyeleri
    mapping(address => uint256) public staked;    // Stake edilmiş miktar

    event SalaryPaid(address indexed user, uint256 amount);
    event Staked(address indexed user, uint256 amount);
    event Unstaked(address indexed user, uint256 amount);

    constructor() {
        owner = msg.sender;
    }

    modifier onlyOwner() {
        require(msg.sender == owner, "Only owner can call");
        _;
    }

    /**
     * @dev Kullanıcıya maaş ödemesi yapar (örneğin stablecoin transferi yerine CELO native token)
     */
    function paySalary(address user) external payable onlyOwner {
        require(msg.value > 0, "Salary must be greater than 0");
        balances[user] += msg.value;
        emit SalaryPaid(user, msg.value);
    }

    /**
     * @dev Kullanıcı maaş bakiyesinin bir kısmını stake eder
     */
    function stake(uint256 amount) external {
        require(balances[msg.sender] >= amount, "Insufficient balance");
        balances[msg.sender] -= amount;
        staked[msg.sender] += amount;
        emit Staked(msg.sender, amount);
    }

    /**
     * @dev Kullanıcı stake ettiği miktarı geri alır (örnek amaçlı, faiz eklenmemiştir)
     */
    function unstake(uint256 amount) external {
        require(staked[msg.sender] >= amount, "Not enough staked");
        staked[msg.sender] -= amount;
        balances[msg.sender] += amount;
        emit Unstaked(msg.sender, amount);
    }

    /**
     * @dev Kullanıcı bakiyesini çeker
     */
    function withdraw(uint256 amount) external {
        require(balances[msg.sender] >= amount, "Not enough balance");
        balances[msg.sender] -= amount;
        payable(msg.sender).transfer(amount);
    }
}
